------- FILE iceMountain.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      4  10000 ????						;; Include required files with the VCS memory mapping and macros
      5  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      6  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE iceMountain.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE iceMountain.asm
      9  0000 ????
     10  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     11  0000 ????						;; Declare the variables from address $80
     12  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     13  0000 ????
     14 U0099 ????				      seg.u	Variables
     15 U0080					      org	$80
     16 U0080
     17 U0080		       00	   SnowmanX   byte.b		; Player 0 (snowman) X axis position
     18 U0081		       00	   SnowmanY   byte.b		; Player 0 (snowman) Y axis position
     19 U0082		       00	   IcicleX    byte.b		; Player 1 (icicle) X axis position
     20 U0083		       00	   IcicleY    byte.b		; Player 1 (icicle) Y axis position
     21 U0084		       00	   SnowmanOffsetL byte.b		; Player 0 (snowman) offset for left sprite
     22 U0085		       00	   SnowmanOffsetR byte.b		; Player 0 (snowman) offset for right sprite
     23 U0086		       00	   SnowmanOffsetD byte.b		; Player 0 (snowman) offset for dead sprite
     24 U0087		       00	   Random     byte.b		; random number for setting player 1 X pos
     25 U0088		       00	   Score      byte.b		; stores the value for the score
     26 U0089		       00	   HiScore    byte.b		; stores the value for the hi score
     27 U008a		       00	   Temp       byte.b		; variable to store temporary time values
     28 U008b		       00	   TimerSprite byte.b		; stores the current time sprite
     29 U008c		       00	   HiScoreSprite byte.b		; stores the value for the hi score
     30 U008d		       00 00	   OnesDigit  word.w		; stores offset of ones digit
     31 U008f		       00 00	   TensDigit  word.w		; stores offset of tens digit
     32 U0091		       00 00	   SnowmanColPtr word.w		; Player 0 (nowman) color pointer
     33 U0093		       00 00	   SnowmanPtr word.w		; Player 0 (snowman) pointer
     34 U0095		       00 00	   IcicleColPtr word.w		; player 1 (icicle) color pointer
     35 U0097		       00 00	   IciclePtr  word.w		; Player 1 (icicle) pointer
     36 U0099
     37 U0099							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     38 U0099							;; Define Constants
     39 U0099							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     40 U0099
     41 U0099		       00 0a	   SNOWMAN_H  =	10	; Height for snowman sprite
     42 U0099		       00 14	   SNOWMAN_H_X2 =	20	; Height for two snowmen for right animation
     43 U0099		       00 1e	   SNOWMAN_H_X3 =	30	; Height for three snowmen for dead animation
     44 U0099		       00 0a	   ICICLE_H   =	10	; Height for icicle sprite
     45 U0099		       00 05	   DIGITS_H   =	5	; Height for timer
     46 U0099
     47 U0099							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     48 U0099							;; Start the ROM at address $F000
     49 U0099							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     50 U0099
     51  10000 ????				       seg	Code
     52  f000					      org	$F000
     53  f000
     54  f000				   Reset
      0  f000					      CLEAN_START		; Calls macro to clear memory / registers
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     56  f00b
     57  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     58  f00b							;; Initialize RAM vars and TIA registers
     59  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     60  f00b
     61  f00b		       a9 01		      lda	#1
     62  f00d		       85 81		      sta	SnowmanY	; SnowmanY = 1
     63  f00f
     64  f00f		       a9 28		      lda	#40
     65  f011		       85 80		      sta	SnowmanX	; SnowmanX = 40
     66  f013
     67  f013		       a9 49		      lda	#73
     68  f015		       85 83		      sta	IcicleY	; IcicleY = 73
     69  f017
     70  f017		       a9 32		      lda	#50
     71  f019		       85 82		      sta	IcicleX	; IcicleX = 50
     72  f01b
     73  f01b		       a9 d4		      lda	#%11010100
     74  f01d		       85 87		      sta	Random	; Sets Random seed
     75  f01f
     76  f01f		       a9 00		      lda	#0
     77  f021		       85 88		      sta	Score
     78  f023		       85 89		      sta	HiScore
     79  f025
     80  f025
     81  f025							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     82  f025							;; Initilize sprite and color pointers
     83  f025							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     84  f025
     85  f025		       a9 47		      lda	#<SnowmanColor
     86  f027		       85 91		      sta	SnowmanColPtr	; Low-byte pointer for snowman color bitmap
     87  f029		       a9 f3		      lda	#>SnowmanColor
     88  f02b		       85 92		      sta	SnowmanColPtr+1	; High-byte pointer for snowman color bitmap
     89  f02d
     90  f02d		       a9 6f		      lda	#<IcicleColor
     91  f02f		       85 95		      sta	IcicleColPtr	; Low-byte pointer for icicle color bitmap
     92  f031		       a9 f3		      lda	#>IcicleColor
     93  f033		       85 96		      sta	IcicleColPtr+1	; High-byte pointer for icicle color bitmap
     94  f035
     95  f035		       a9 79		      lda	#<Snowman
     96  f037		       85 93		      sta	SnowmanPtr	; Low-byte pointer for snowman bitmap
     97  f039		       a9 f3		      lda	#>Snowman
     98  f03b		       85 94		      sta	SnowmanPtr+1	; High-byte pointer for snowman bitmap
     99  f03d
    100  f03d		       a9 a1		      lda	#<Icicle
    101  f03f		       85 97		      sta	IciclePtr	; Low-byte pointer for icicle bitmap
    102  f041		       a9 f3		      lda	#>Icicle
    103  f043		       85 98		      sta	IciclePtr+1	; High-byte pointer for icicle bitmap
    104  f045
    105  f045							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    106  f045							;; Start the main game display and render frames
    107  f045							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    108  f045
    109  f045				   StartFrame
    110  f045
    111  f045							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    112  f045							;; Display VSYNC and VBLANK
    113  f045							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    114  f045
    115  f045		       a9 02		      lda	#2	;
    116  f047		       85 01		      sta	VBLANK	; turns on VBLANK
    117  f049		       85 00		      sta	VSYNC	; turns on VSYNC
    118  f04b					      REPEAT	3
    119  f04b		       85 02		      sta	WSYNC	; display 3 lines of VSYNC
    118  f04b					      REPEND
    119  f04d		       85 02		      sta	WSYNC	; display 3 lines of VSYNC
    118  f04d					      REPEND
    119  f04f		       85 02		      sta	WSYNC	; display 3 lines of VSYNC
    120  f051					      REPEND
    121  f051		       a9 00		      lda	#0
    122  f053		       85 00		      sta	VSYNC	; turns off VSYNC
    123  f055
    124  f055					      REPEAT	33
    125  f055		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f055					      REPEND
    125  f057		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f057					      REPEND
    125  f059		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f059					      REPEND
    125  f05b		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f05b					      REPEND
    125  f05d		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f05d					      REPEND
    125  f05f		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f05f					      REPEND
    125  f061		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f061					      REPEND
    125  f063		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f063					      REPEND
    125  f065		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f065					      REPEND
    125  f067		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f067					      REPEND
    125  f069		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f069					      REPEND
    125  f06b		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f06b					      REPEND
    125  f06d		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f06d					      REPEND
    125  f06f		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f06f					      REPEND
    125  f071		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f071					      REPEND
    125  f073		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f073					      REPEND
    125  f075		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f075					      REPEND
    125  f077		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f077					      REPEND
    125  f079		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f079					      REPEND
    125  f07b		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f07b					      REPEND
    125  f07d		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f07d					      REPEND
    125  f07f		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f07f					      REPEND
    125  f081		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f081					      REPEND
    125  f083		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f083					      REPEND
    125  f085		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f085					      REPEND
    125  f087		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f087					      REPEND
    125  f089		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f089					      REPEND
    125  f08b		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f08b					      REPEND
    125  f08d		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f08d					      REPEND
    125  f08f		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f08f					      REPEND
    125  f091		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f091					      REPEND
    125  f093		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    124  f093					      REPEND
    125  f095		       85 02		      sta	WSYNC	; display 33 lines of VBLANK
    126  f097					      REPEND
    127  f097
    128  f097							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    129  f097							;; Calculations performed in Pre-VBlank
    130  f097							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    131  f097
    132  f097		       a5 80		      lda	SnowmanX
    133  f099		       a0 00		      ldy	#0
    134  f09b		       20 3d f2 	      jsr	SetObjectX	; set horizontal position for snowman and jump to subroutine
    135  f09e
    136  f09e		       a5 82		      lda	IcicleX
    137  f0a0		       a0 01		      ldy	#1
    138  f0a2		       20 3d f2 	      jsr	SetObjectX	; set horizontal position for icicle and jump to subroutine
    139  f0a5
    140  f0a5		       20 72 f2 	      jsr	CalculateDigitOffset	; calculates the digit offset for lookup table
    141  f0a8
    142  f0a8		       85 02		      sta	WSYNC	; wait 1 scan line
    143  f0aa		       85 2a		      sta	HMOVE	; apply the offsets set by subroutine
    144  f0ac
    145  f0ac		       a9 00		      lda	#0
    146  f0ae		       85 01		      sta	VBLANK	; turns off VBLANK
    147  f0b0
    148  f0b0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    149  f0b0							;; Render 192 visible scan lines
    150  f0b0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    151  f0b0
    152  f0b0		       a9 00		      lda	#0
    153  f0b2		       85 0d		      sta	PF0
    154  f0b4		       85 0e		      sta	PF1
    155  f0b6		       85 0f		      sta	PF2
    156  f0b8		       85 1b		      sta	GRP0
    157  f0ba		       85 1c		      sta	GRP1	; resets registers before displaying the score
    158  f0bc		       85 0a		      sta	CTRLPF
    159  f0be		       a9 0e		      lda	#$0e
    160  f0c0		       85 09		      sta	COLUBK
    161  f0c2		       a9 9c		      lda	#$9c
    162  f0c4		       85 08		      sta	COLUPF
    163  f0c6		       a2 05		      ldx	#DIGITS_H	; X = Digits height
    164  f0c8
    165  f0c8				   .ScoreDigitLoop
    166  f0c8		       a4 8f		      ldy	TensDigit	; get the tens digit offset for the Timer
    167  f0ca		       b9 f7 f2 	      lda	Digits,Y	; load the bit pattern from lookup table
    168  f0cd		       29 f0		      and	#$F0	; mask/remove the graphics for the ones digit
    169  f0cf		       85 8b		      sta	TimerSprite	; save the score tens digit pattern in a variable
    170  f0d1
    171  f0d1		       a4 8d		      ldy	OnesDigit	; get the ones digit offset for the Timer
    172  f0d3		       b9 f7 f2 	      lda	Digits,Y	; load the digit bit pattern from lookup table
    173  f0d6		       29 0f		      and	#$0F	; mask/remove the graphics for the tens digit
    174  f0d8		       05 8b		      ora	TimerSprite	; merge it with the saved tens digit sprite
    175  f0da		       85 8b		      sta	TimerSprite	; and save it
    176  f0dc		       85 02		      sta	WSYNC	; wait for the end of scanline
    177  f0de		       85 0e		      sta	PF1	; update the playfield to display the Score sprite
    178  f0e0
    179  f0e0		       a4 90		      ldy	TensDigit+1	; get the left digit offset for the Hi Score
    180  f0e2		       b9 f7 f2 	      lda	Digits,Y	; load the digit pattern from lookup table
    181  f0e5		       29 f0		      and	#$F0	; mask/remove the graphics for the ones digit
    182  f0e7		       85 8c		      sta	HiScoreSprite	; save the timer tens digit pattern in a variable
    183  f0e9
    184  f0e9		       a4 8e		      ldy	OnesDigit+1	; get the ones digit offset for the Hi Score
    185  f0eb		       b9 f7 f2 	      lda	Digits,Y	; load digit pattern from the lookup table
    186  f0ee		       29 0f		      and	#$0F	; mask/remove the graphics for the tens digit
    187  f0f0		       05 8c		      ora	HiScoreSprite	; merge with the saved tens digit graphics
    188  f0f2		       85 8c		      sta	HiScoreSprite	; and save it
    189  f0f4
    190  f0f4		       20 92 f2 	      jsr	Sleep12Cycles	; wastes some cycles
    191  f0f7
    192  f0f7		       85 0e		      sta	PF1	; update the playfield for Hi Score display
    193  f0f9
    194  f0f9		       a4 8b		      ldy	TimerSprite	; preload for the next scanline
    195  f0fb		       85 02		      sta	WSYNC	; wait for next scanline
    196  f0fd
    197  f0fd		       84 0e		      sty	PF1	; update playfield for the score display
    198  f0ff		       e6 8f		      inc	TensDigit
    199  f101		       e6 90		      inc	TensDigit+1
    200  f103		       e6 8d		      inc	OnesDigit
    201  f105		       e6 8e		      inc	OnesDigit+1	; increment all digits for the next line of data
    202  f107
    203  f107		       20 92 f2 	      jsr	Sleep12Cycles	; waste some cycles
    204  f10a
    205  f10a		       ca		      dex		; X--
    206  f10b		       85 0e		      sta	PF1	; update the playfield for the Score display
    207  f10d		       d0 b9		      bne	.ScoreDigitLoop	; if dex != 0, then branch to ScoreDigitLoop
    208  f10f
    209  f10f
    210  f10f		       85 02		      sta	WSYNC
    211  f111
    212  f111		       a9 00		      lda	#0
    213  f113		       85 0d		      sta	PF0
    214  f115		       85 0e		      sta	PF1
    215  f117		       85 0f		      sta	PF2
    216  f119
    217  f119		       85 02		      sta	WSYNC
    218  f11b		       85 02		      sta	WSYNC
    219  f11d		       85 02		      sta	WSYNC
    220  f11f
    221  f11f
    222  f11f				   VisibleLines
    223  f11f		       a9 9e		      lda	#$9e
    224  f121		       85 08		      sta	COLUPF	; sets color of playfield to ice blue white
    225  f123		       a9 01		      lda	#%00000001
    226  f125		       85 0a		      sta	CTRLPF	; reflects playfield
    227  f127		       a9 f0		      lda	#$F0
    228  f129		       85 0d		      sta	PF0	; sets PF0 bit pattern
    229  f12b		       a9 fc		      lda	#$FC
    230  f12d		       85 0e		      sta	PF1	; sets PF1 bit pattern lda #0 sta PF2
    231  f12f		       a9 ae		      lda	#$ae
    232  f131		       85 09		      sta	COLUBK	; sets color to background light blue
    233  f133
    234  f133		       a2 55		      ldx	#85	; runs loop 79 times
    235  f135				   .MainLineLoop
    236  f135				   .InsideSnowman
    237  f135		       8a		      txa		; transfer X to accumulator
    238  f136		       38		      sec		; set carry
    239  f137		       e5 81		      sbc	SnowmanY	; subtrack left body Y position from accumulator
    240  f139		       c5 0a		      cmp	SNOWMAN_H	; inside sprite height bounds?
    241  f13b		       90 02		      bcc	.DrawSnowman	; if inside bounds, draw snowman sprite
    242  f13d		       a9 00		      lda	#0	; else set lookup to 0
    243  f13f
    244  f13f				   .DrawSnowman
    245  f13f		       18		      clc		; clear carry flag
    246  f140		       65 84		      adc	SnowmanOffsetL	; go to left sprite frame in memory
    247  f142		       18		      clc		; clear carry flag
    248  f143		       65 85		      adc	SnowmanOffsetR	; go to right sprite frame in memory
    249  f145		       18		      clc		; clear carry flag
    250  f146		       65 86		      adc	SnowmanOffsetD	; go to dead sprite frame in memory
    251  f148		       a8		      tay		; load Y
    252  f149		       a9 05		      lda	#%00000101
    253  f14b		       85 04		      sta	NUSIZ0
    254  f14d		       b1 93		      lda	(SnowmanPtr),Y	; load snowman from lookup table
    255  f14f		       85 02		      sta	WSYNC	; wait for scan line
    256  f151		       85 1b		      sta	GRP0	; set graphics for player 0 (snowman)
    257  f153		       b1 91		      lda	(SnowmanColPtr),Y	; load snowman color from lookup table
    258  f155		       85 06		      sta	COLUP0	; set color of player 0
    259  f157
    260  f157				   .InsideIcicle
    261  f157		       8a		      txa		; transfer X to accumulator
    262  f158		       38		      sec		; set carry
    263  f159		       e5 83		      sbc	IcicleY	; subtrack left body Y position from accumulator
    264  f15b		       c5 0a		      cmp	ICICLE_H	; inside sprite height bounds?
    265  f15d		       90 02		      bcc	.DrawIcicle	; if inside bounds, draw icicle sprite
    266  f15f		       a9 00		      lda	#0	; else set lookup to 0
    267  f161
    268  f161				   .DrawIcicle
    269  f161		       a8		      tay		; load Y
    270  f162		       b1 97		      lda	(IciclePtr),Y	; load icicle from lookup table
    271  f164		       85 02		      sta	WSYNC	; wait for scan line
    272  f166		       85 1c		      sta	GRP1	; set graphics for player 1 (icicle)
    273  f168		       b1 95		      lda	(IcicleColPtr),Y	; load icicle color from lookup table
    274  f16a		       85 07		      sta	COLUP1	; set color of player 1 (icicle)
    275  f16c
    276  f16c		       ca		      dex		; X--
    277  f16d		       d0 c6		      bne	.MainLineLoop	; While (X != 0)
    278  f16f
    279  f16f		       a9 00		      lda	#0
    280  f171		       85 84		      sta	SnowmanOffsetL
    281  f173		       85 85		      sta	SnowmanOffsetR
    282  f175		       85 86		      sta	SnowmanOffsetD	; reset all offsets each frame
    283  f177
    284  f177
    285  f177		       a9 0c		      lda	#$0c
    286  f179		       85 09		      sta	COLUBK	; sets color to background snow grey
    287  f17b
    288  f17b					      REPEAT	1
    289  f17b		       85 02		      sta	WSYNC
    290  f17d		       85 02		      sta	WSYNC
    291  f17f					      REPEND
    292  f17f
    293  f17f		       a9 0e		      lda	#$0e
    294  f181		       85 09		      sta	COLUBK	; sets color to background snow white
    295  f183
    296  f183					      REPEAT	6
    297  f183		       85 02		      sta	WSYNC
    298  f185		       85 02		      sta	WSYNC
    296  f185					      REPEND
    297  f187		       85 02		      sta	WSYNC
    298  f189		       85 02		      sta	WSYNC
    296  f189					      REPEND
    297  f18b		       85 02		      sta	WSYNC
    298  f18d		       85 02		      sta	WSYNC
    296  f18d					      REPEND
    297  f18f		       85 02		      sta	WSYNC
    298  f191		       85 02		      sta	WSYNC
    296  f191					      REPEND
    297  f193		       85 02		      sta	WSYNC
    298  f195		       85 02		      sta	WSYNC
    296  f195					      REPEND
    297  f197		       85 02		      sta	WSYNC
    298  f199		       85 02		      sta	WSYNC
    299  f19b					      REPEND
    300  f19b
    301  f19b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    302  f19b							;; Display Overscan of 30 lines
    303  f19b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    304  f19b
    305  f19b		       a9 02		      lda	#2
    306  f19d		       85 01		      sta	VBLANK	; turns on VBLANK
    307  f19f					      REPEAT	30
    308  f19f		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f19f					      REPEND
    308  f1a1		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f1a1					      REPEND
    308  f1a3		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f1a3					      REPEND
    308  f1a5		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f1a5					      REPEND
    308  f1a7		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f1a7					      REPEND
    308  f1a9		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f1a9					      REPEND
    308  f1ab		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f1ab					      REPEND
    308  f1ad		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f1ad					      REPEND
    308  f1af		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f1af					      REPEND
    308  f1b1		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f1b1					      REPEND
    308  f1b3		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f1b3					      REPEND
    308  f1b5		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f1b5					      REPEND
    308  f1b7		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f1b7					      REPEND
    308  f1b9		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f1b9					      REPEND
    308  f1bb		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f1bb					      REPEND
    308  f1bd		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f1bd					      REPEND
    308  f1bf		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f1bf					      REPEND
    308  f1c1		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f1c1					      REPEND
    308  f1c3		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f1c3					      REPEND
    308  f1c5		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f1c5					      REPEND
    308  f1c7		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f1c7					      REPEND
    308  f1c9		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f1c9					      REPEND
    308  f1cb		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f1cb					      REPEND
    308  f1cd		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f1cd					      REPEND
    308  f1cf		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f1cf					      REPEND
    308  f1d1		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f1d1					      REPEND
    308  f1d3		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f1d3					      REPEND
    308  f1d5		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f1d5					      REPEND
    308  f1d7		       85 02		      sta	WSYNC	; display 30 overscan lines
    307  f1d7					      REPEND
    308  f1d9		       85 02		      sta	WSYNC	; display 30 overscan lines
    309  f1db					      REPEND
    310  f1db
    311  f1db		       a9 00		      lda	#0
    312  f1dd		       85 01		      sta	VBLANK	; turns off VBLANK
    313  f1df
    314  f1df							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    315  f1df							;; Joystick input for Player 0 (snowman)
    316  f1df							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    317  f1df
    318  f1df				   CheckLeft
    319  f1df		       a9 40		      lda	#%01000000
    320  f1e1		       2c 80 02 	      bit	SWCHA	; check for left joystick input
    321  f1e4		       d0 16		      bne	CheckRight	; go to check right joystick input
    322  f1e6		       a5 0a		      lda	SNOWMAN_H
    323  f1e8		       85 84		      sta	SnowmanOffsetL	; adds height to go to left sprite frame
    324  f1ea					      REPEAT	2
    325  f1ea		       a5 80		      lda	SnowmanX
    326  f1ec		       18		      clc		; clears carry
    327  f1ed		       c9 1f		      cmp	#31	; compares Snowman X with value 31
    328  f1ef		       30 0b		      bmi	CheckRight	; goes to check right if less that 31
    329  f1f1		       c6 80		      dec	SnowmanX	; moves snowman left two pixels per frame
    324  f1f1					      REPEND
    325  f1f3		       a5 80		      lda	SnowmanX
    326  f1f5		       18		      clc		; clears carry
    327  f1f6		       c9 1f		      cmp	#31	; compares Snowman X with value 31
    328  f1f8		       30 02		      bmi	CheckRight	; goes to check right if less that 31
    329  f1fa		       c6 80		      dec	SnowmanX	; moves snowman left two pixels per frame
    330  f1fc					      REPEND
    331  f1fc
    332  f1fc				   CheckRight
    333  f1fc		       a9 80		      lda	#%10000000
    334  f1fe		       2c 80 02 	      bit	SWCHA	; check for right joystick input
    335  f201		       d0 16		      bne	EndJoystickTest	; ends test if not right either
    336  f203		       a5 14		      lda	SNOWMAN_H_X2
    337  f205		       85 84		      sta	SnowmanOffsetL	; adds height x 2 to go to right sprite frame
    338  f207					      REPEAT	2
    339  f207		       a5 80		      lda	SnowmanX
    340  f209		       18		      clc		; clears carry
    341  f20a		       c9 5e		      cmp	#94	; compares Snowman X with value 94
    342  f20c		       10 0b		      bpl	EndJoystickTest	; goes to ends test if value > 94
    343  f20e		       e6 80		      inc	SnowmanX	; moves snowman right two pixels per frame
    338  f20e					      REPEND
    339  f210		       a5 80		      lda	SnowmanX
    340  f212		       18		      clc		; clears carry
    341  f213		       c9 5e		      cmp	#94	; compares Snowman X with value 94
    342  f215		       10 02		      bpl	EndJoystickTest	; goes to ends test if value > 94
    343  f217		       e6 80		      inc	SnowmanX	; moves snowman right two pixels per frame
    344  f219					      REPEND
    345  f219
    346  f219				   EndJoystickTest		; if no joystick input is detected, do nothing
    347  f219
    348  f219							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    349  f219							;; Updates positions for next frame
    350  f219							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    351  f219
    352  f219				   UpdateIciclePos
    353  f219		       a5 83		      lda	IcicleY
    354  f21b		       18		      clc		; clears carry
    355  f21c		       c9 02		      cmp	#2	; compares with value 2
    356  f21e		       30 09		      bmi	.ResetIciclePos	; if icicle is less than 2 (icicle hit floor) reset position
    357  f220					      REPEAT	3
    358  f220		       c6 83		      dec	IcicleY	; moves icicle down at speed of 3px per frame
    357  f220					      REPEND
    358  f222		       c6 83		      dec	IcicleY	; moves icicle down at speed of 3px per frame
    357  f222					      REPEND
    358  f224		       c6 83		      dec	IcicleY	; moves icicle down at speed of 3px per frame
    359  f226					      REPEND
    360  f226		       4c 2c f2 	      jmp	EndIciclePosUpdate
    361  f229
    362  f229				   .ResetIciclePos
    363  f229		       20 51 f2 	      jsr	GetRandomIciclePos	; cals subrouting for random pos for icicle
    364  f22c
    365  f22c				   EndIciclePosUpdate		; does nothing if it does not reset
    366  f22c
    367  f22c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    368  f22c							;; Check for collision between player 0 (snowman) and player 1 (
    369  f22c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    370  f22c
    371  f22c				   CheckCollision
    372  f22c		       a9 80		      lda	#%10000000	; CXPPMM bit 7 (detects P0 and P1 colission)
    373  f22e		       24 07		      bit	CXPPMM	; check for collision
    374  f230		       d0 03		      bne	.Collision	; branches if collision occured
    375  f232		       4c 38 f2 	      jmp	EndCollisionCheck	; skip if no collision
    376  f235
    377  f235				   .Collision
    378  f235		       20 d8 f2 	      jsr	GameOver	; calls GameOver subroutine
    379  f238
    380  f238				   EndCollisionCheck		; fallback for no collision
    381  f238		       85 2c		      sta	CXCLR	; clears collision flags
    382  f23a
    383  f23a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    384  f23a							;; Loop back to the Start
    385  f23a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    386  f23a
    387  f23a		       4c 45 f0 	      jmp	StartFrame	; continue to next frame
    388  f23d
    389  f23d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    390  f23d							;; Subroutine to handle horizontal positioning
    391  f23d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    392  f23d
    393  f23d				   SetObjectX subroutine
    394  f23d		       85 02		      sta	WSYNC	; start a fresh scanline
    395  f23f		       38		      sec		; set carry flag
    396  f240				   .Div15Loop
    397  f240		       e9 0f		      sbc	#15	; subtract 15 from accumulator
    398  f242		       b0 fc		      bcs	.Div15Loop	; loop until flag is clear
    399  f244		       49 07		      eor	#%00000111	; XOR with 4 bits for (-8 to 7) offset
    400  f246					      REPEAT	4
    401  f246		       0a		      asl		; shift left 4 time to correct 4 bits
    400  f246					      REPEND
    401  f247		       0a		      asl		; shift left 4 time to correct 4 bits
    400  f247					      REPEND
    401  f248		       0a		      asl		; shift left 4 time to correct 4 bits
    400  f248					      REPEND
    401  f249		       0a		      asl		; shift left 4 time to correct 4 bits
    402  f24a					      REPEND
    403  f24a		       99 20 00 	      sta	HMP0,Y	; store the fine offset
    404  f24d		       99 10 00 	      sta	RESP0,Y	; fix object in 15-step increment
    405  f250		       60		      rts
    406  f251
    407  f251							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    408  f251							;; Subroutine to get random X position for icicle
    409  f251							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    410  f251
    411  f251				   GetRandomIciclePos subroutine
    412  f251		       a5 87		      lda	Random
    413  f253		       0a		      asl
    414  f254		       45 87		      eor	Random
    415  f256		       0a		      asl
    416  f257		       45 87		      eor	Random
    417  f259		       0a		      asl
    418  f25a		       0a		      asl
    419  f25b		       45 87		      eor	Random
    420  f25d		       0a		      asl
    421  f25e		       26 87		      rol	Random	; Performs bit operations for random number
    422  f260
    423  f260		       4a		      lsr
    424  f261		       4a		      lsr		; divides value by 4
    425  f262		       85 82		      sta	IcicleX	; stores value in IcicleX
    426  f264		       a9 1e		      lda	#30
    427  f266		       18		      clc		; clears the carry
    428  f267		       65 82		      adc	IcicleX
    429  f269		       85 82		      sta	IcicleX	; IcicleX += 30
    430  f26b		       a9 49		      lda	#73
    431  f26d		       85 83		      sta	IcicleY	; IcicleY = 73
    432  f26f		       e6 88		      inc	Score	; Increments score
    433  f271		       60		      rts		; return
    434  f272
    435  f272							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    436  f272							;; Subroutine to get time digit offsets
    437  f272							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    438  f272
    439  f272				   CalculateDigitOffset subroutine
    440  f272		       a2 01		      ldx	#1
    441  f274				   .PrepareScoreLoop
    442  f274		       b5 88		      lda	Score,X
    443  f276		       29 0f		      and	#%00001111	; masks first 4 bits
    444  f278		       85 8a		      sta	Temp	; save A in Temp
    445  f27a		       0a		      asl
    446  f27b		       0a		      asl		; shift left twice for n * 4
    447  f27c		       65 8a		      adc	Temp	; adds original A for n * 5
    448  f27e		       95 8d		      sta	OnesDigit,X	; stores ones digit
    449  f280
    450  f280		       b5 88		      lda	Score,X
    451  f282		       29 f0		      and	#%11110000	; masks last 4 bits
    452  f284		       4a		      lsr
    453  f285		       4a		      lsr		; shift right twice for n / 4
    454  f286		       85 8a		      sta	Temp	; save A in Temp
    455  f288		       4a		      lsr
    456  f289		       4a		      lsr		; shift right twice for n / 16
    457  f28a		       65 8a		      adc	Temp	; adds value stored in temp for n / 16 + n / 4
    458  f28c		       95 8f		      sta	TensDigit,X	; stores tens digit
    459  f28e		       ca		      dex		; X--
    460  f28f		       10 e3		      bpl	.PrepareScoreLoop	; while X >= 0
    461  f291
    462  f291		       60		      rts		; return
    463  f292
    464  f292							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    465  f292							;; Subroutine to waste 12 cycles
    466  f292							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    467  f292				   Sleep12Cycles subroutine
    468  f292		       60		      rts
    469  f293
    470  f293							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    471  f293							;; Subroutine for collision sound
    472  f293							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    473  f293				   GenerateDeadSound subroutine
    474  f293					      REPEAT	5
    475  f293		       a9 0a		      lda	#10
    476  f295		       85 19		      sta	AUDV0	; sets volume
    477  f297		       a9 1f		      lda	#31
    478  f299		       85 17		      sta	AUDF0	; sets frequency
    479  f29b		       a9 08		      lda	#8
    480  f29d		       85 15		      sta	AUDC0	; sets sound type
    474  f29d					      REPEND
    475  f29f		       a9 0a		      lda	#10
    476  f2a1		       85 19		      sta	AUDV0	; sets volume
    477  f2a3		       a9 1f		      lda	#31
    478  f2a5		       85 17		      sta	AUDF0	; sets frequency
    479  f2a7		       a9 08		      lda	#8
    480  f2a9		       85 15		      sta	AUDC0	; sets sound type
    474  f2a9					      REPEND
    475  f2ab		       a9 0a		      lda	#10
    476  f2ad		       85 19		      sta	AUDV0	; sets volume
    477  f2af		       a9 1f		      lda	#31
    478  f2b1		       85 17		      sta	AUDF0	; sets frequency
    479  f2b3		       a9 08		      lda	#8
    480  f2b5		       85 15		      sta	AUDC0	; sets sound type
    474  f2b5					      REPEND
    475  f2b7		       a9 0a		      lda	#10
    476  f2b9		       85 19		      sta	AUDV0	; sets volume
    477  f2bb		       a9 1f		      lda	#31
    478  f2bd		       85 17		      sta	AUDF0	; sets frequency
    479  f2bf		       a9 08		      lda	#8
    480  f2c1		       85 15		      sta	AUDC0	; sets sound type
    474  f2c1					      REPEND
    475  f2c3		       a9 0a		      lda	#10
    476  f2c5		       85 19		      sta	AUDV0	; sets volume
    477  f2c7		       a9 1f		      lda	#31
    478  f2c9		       85 17		      sta	AUDF0	; sets frequency
    479  f2cb		       a9 08		      lda	#8
    480  f2cd		       85 15		      sta	AUDC0	; sets sound type
    481  f2cf					      REPEND
    482  f2cf		       a9 00		      lda	#0
    483  f2d1		       85 19		      sta	AUDV0
    484  f2d3		       85 17		      sta	AUDF0
    485  f2d5		       85 15		      sta	AUDC0	; resets sound
    486  f2d7		       60		      rts		; return
    487  f2d8
    488  f2d8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    489  f2d8							;; Subroutine when game is over (collision occured)
    490  f2d8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    491  f2d8
    492  f2d8				   GameOver   subroutine
    493  f2d8		       a9 00		      lda	#0
    494  f2da		       85 84		      sta	SnowmanOffsetL
    495  f2dc		       85 85		      sta	SnowmanOffsetR	; clears left and right snowman offset to prevent animation
    496  f2de		       a5 1e		      lda	SNOWMAN_H_X3
    497  f2e0		       85 86		      sta	SnowmanOffsetD	; adds height x 3 to go to dead sprite frame
    498  f2e2		       20 93 f2 	      jsr	GenerateDeadSound	; adds dead sound
    499  f2e5		       a5 88		      lda	Score
    500  f2e7		       c5 89		      cmp	HiScore
    501  f2e9		       10 03		      bpl	.SetHighScore	; sets high score if score is greater than highscore
    502  f2eb		       4c f2 f2 	      jmp	ResetScore	; goes to reset score if hi score already set or greater
    503  f2ee
    504  f2ee				   .SetHighScore
    505  f2ee		       a5 88		      lda	Score
    506  f2f0		       85 89		      sta	HiScore	; stores the score in hi score
    507  f2f2
    508  f2f2				   ResetScore
    509  f2f2		       a9 00		      lda	#0
    510  f2f4		       85 88		      sta	Score	; score gets reset
    511  f2f6		       60		      rts		; return
    512  f2f7
    513  f2f7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    514  f2f7							;; Lookup Table
    515  f2f7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    516  f2f7
    517  f2f7				   Digits
    518  f2f7		       77		      .byte.b	%01110111	; ### ###
    519  f2f8		       55		      .byte.b	%01010101	; # # # #
    520  f2f9		       55		      .byte.b	%01010101	; # # # #
    521  f2fa		       55		      .byte.b	%01010101	; # # # #
    522  f2fb		       77		      .byte.b	%01110111	; ### ###
    523  f2fc
    524  f2fc		       11		      .byte.b	%00010001	;   #	 #
    525  f2fd		       11		      .byte.b	%00010001	;   #	 #
    526  f2fe		       11		      .byte.b	%00010001	;   #	 #
    527  f2ff		       11		      .byte.b	%00010001	;   #	 #
    528  f300		       11		      .byte.b	%00010001	;   #	 #
    529  f301
    530  f301		       77		      .byte.b	%01110111	; ### ###
    531  f302		       11		      .byte.b	%00010001	;   #	 #
    532  f303		       77		      .byte.b	%01110111	; ### ###
    533  f304		       44		      .byte.b	%01000100	; #   #
    534  f305		       77		      .byte.b	%01110111	; ### ###
    535  f306
    536  f306		       77		      .byte.b	%01110111	; ### ###
    537  f307		       11		      .byte.b	%00010001	;   #	 #
    538  f308		       33		      .byte.b	%00110011	;  ##	##
    539  f309		       11		      .byte.b	%00010001	;   #	 #
    540  f30a		       77		      .byte.b	%01110111	; ### ###
    541  f30b
    542  f30b		       55		      .byte.b	%01010101	; # # # #
    543  f30c		       55		      .byte.b	%01010101	; # # # #
    544  f30d		       77		      .byte.b	%01110111	; ### ###
    545  f30e		       11		      .byte.b	%00010001	;   #	 #
    546  f30f		       11		      .byte.b	%00010001	;   #	 #
    547  f310
    548  f310		       77		      .byte.b	%01110111	; ### ###
    549  f311		       44		      .byte.b	%01000100	; #   #
    550  f312		       77		      .byte.b	%01110111	; ### ###
    551  f313		       11		      .byte.b	%00010001	;   #	 #
    552  f314		       77		      .byte.b	%01110111	; ### ###
    553  f315
    554  f315		       77		      .byte.b	%01110111	; ### ###
    555  f316		       44		      .byte.b	%01000100	; #   #
    556  f317		       77		      .byte.b	%01110111	; ### ###
    557  f318		       55		      .byte.b	%01010101	; # # # #
    558  f319		       77		      .byte.b	%01110111	; ### ###
    559  f31a
    560  f31a		       77		      .byte.b	%01110111	; ### ###
    561  f31b		       11		      .byte.b	%00010001	;   #	 #
    562  f31c		       11		      .byte.b	%00010001	;   #	 #
    563  f31d		       11		      .byte.b	%00010001	;   #	 #
    564  f31e		       11		      .byte.b	%00010001	;   #	 #
    565  f31f
    566  f31f		       77		      .byte.b	%01110111	; ### ###
    567  f320		       55		      .byte.b	%01010101	; # # # #
    568  f321		       77		      .byte.b	%01110111	; ### ###
    569  f322		       55		      .byte.b	%01010101	; # # # #
    570  f323		       77		      .byte.b	%01110111	; ### ###
    571  f324
    572  f324		       77		      .byte.b	%01110111	; ### ###
    573  f325		       55		      .byte.b	%01010101	; # # # #
    574  f326		       77		      .byte.b	%01110111	; ### ###
    575  f327		       11		      .byte.b	%00010001	;   #	 #
    576  f328		       77		      .byte.b	%01110111	; ### ###
    577  f329
    578  f329		       22		      .byte.b	%00100010	;  #	#
    579  f32a		       55		      .byte.b	%01010101	; # # # #
    580  f32b		       77		      .byte.b	%01110111	; ### ###
    581  f32c		       55		      .byte.b	%01010101	; # # # #
    582  f32d		       55		      .byte.b	%01010101	; # # # #
    583  f32e
    584  f32e		       77		      .byte.b	%01110111	; ### ###
    585  f32f		       55		      .byte.b	%01010101	; # # # #
    586  f330		       66		      .byte.b	%01100110	; ##  ##
    587  f331		       55		      .byte.b	%01010101	; # # # #
    588  f332		       77		      .byte.b	%01110111	; ### ###
    589  f333
    590  f333		       77		      .byte.b	%01110111	; ### ###
    591  f334		       44		      .byte.b	%01000100	; #   #
    592  f335		       44		      .byte.b	%01000100	; #   #
    593  f336		       44		      .byte.b	%01000100	; #   #
    594  f337		       77		      .byte.b	%01110111	; ### ###
    595  f338
    596  f338		       66		      .byte.b	%01100110	; ##  ##
    597  f339		       55		      .byte.b	%01010101	; # # # #
    598  f33a		       55		      .byte.b	%01010101	; # # # #
    599  f33b		       55		      .byte.b	%01010101	; # # # #
    600  f33c		       66		      .byte.b	%01100110	; ##  ##
    601  f33d
    602  f33d		       77		      .byte.b	%01110111	; ### ###
    603  f33e		       44		      .byte.b	%01000100	; #   #
    604  f33f		       77		      .byte.b	%01110111	; ### ###
    605  f340		       44		      .byte.b	%01000100	; #   #
    606  f341		       77		      .byte.b	%01110111	; ### ###
    607  f342
    608  f342		       77		      .byte.b	%01110111	; ### ###
    609  f343		       44		      .byte.b	%01000100	; #   #
    610  f344		       66		      .byte.b	%01100110	; ##  ##
    611  f345		       44		      .byte.b	%01000100	; #   #
    612  f346		       44		      .byte.b	%01000100	; #   #
    613  f347
    614  f347
    615  f347				   SnowmanColor 		; color for snowman
    616  f347		       00		      .byte.b	#$00
    617  f348		       0e		      .byte.b	#$0e
    618  f349		       0e		      .byte.b	#$0e
    619  f34a		       0e		      .byte.b	#$0e
    620  f34b		       0e		      .byte.b	#$0e
    621  f34c		       0e		      .byte.b	#$0e
    622  f34d		       0e		      .byte.b	#$0e
    623  f34e		       0e		      .byte.b	#$0e
    624  f34f		       0e		      .byte.b	#$0e
    625  f350		       0e		      .byte.b	#$0e
    626  f351
    627  f351				   SnowmanColorLeft		; color for snowman when moving left
    628  f351		       00		      .byte.b	#$00
    629  f352		       0e		      .byte.b	#$0e
    630  f353		       0e		      .byte.b	#$0e
    631  f354		       0e		      .byte.b	#$0e
    632  f355		       0e		      .byte.b	#$0e
    633  f356		       0e		      .byte.b	#$0e
    634  f357		       0e		      .byte.b	#$0e
    635  f358		       0e		      .byte.b	#$0e
    636  f359		       0e		      .byte.b	#$0e
    637  f35a		       0e		      .byte.b	#$0e
    638  f35b
    639  f35b				   SnowmanColorRight		;color for snowman when moving right
    640  f35b		       00		      .byte.b	#$00
    641  f35c		       0e		      .byte.b	#$0e
    642  f35d		       0e		      .byte.b	#$0e
    643  f35e		       0e		      .byte.b	#$0e
    644  f35f		       0e		      .byte.b	#$0e
    645  f360		       0e		      .byte.b	#$0e
    646  f361		       0e		      .byte.b	#$0e
    647  f362		       0e		      .byte.b	#$0e
    648  f363		       0e		      .byte.b	#$0e
    649  f364		       0e		      .byte.b	#$0e
    650  f365
    651  f365				   SnowmanColorDead		;color for snowman when dead
    652  f365		       00		      .byte.b	#$00
    653  f366		       0e		      .byte.b	#$0e
    654  f367		       0e		      .byte.b	#$0e
    655  f368		       0e		      .byte.b	#$0e
    656  f369		       0e		      .byte.b	#$0e
    657  f36a		       0e		      .byte.b	#$0e
    658  f36b		       0e		      .byte.b	#$0e
    659  f36c		       9c		      .byte.b	#$9c
    660  f36d		       9c		      .byte.b	#$9c
    661  f36e		       9c		      .byte.b	#$9c
    662  f36f
    663  f36f				   IcicleColor		; color for icicle
    664  f36f		       00		      .byte.b	#%00
    665  f370		       9c		      .byte.b	#$9c
    666  f371		       9c		      .byte.b	#$9c
    667  f372		       9c		      .byte.b	#$9c
    668  f373		       9c		      .byte.b	#$9c
    669  f374		       9c		      .byte.b	#$9c
    670  f375		       9c		      .byte.b	#$9c
    671  f376		       9c		      .byte.b	#$9c
    672  f377		       9c		      .byte.b	#$9c
    673  f378		       9c		      .byte.b	#$9c
    674  f379
    675  f379				   Snowman
    676  f379		       00		      .byte.b	#%00000000
    677  f37a		       ff		      .byte.b	#%11111111
    678  f37b		       f7		      .byte.b	#%11110111
    679  f37c		       ff		      .byte.b	#%11111111
    680  f37d		       76		      .byte.b	#%01110110
    681  f37e		       ff		      .byte.b	#%11111111
    682  f37f		       a5		      .byte.b	#%10100101
    683  f380		       a5		      .byte.b	#%10100101
    684  f381		       5a		      .byte.b	#%01011010
    685  f382		       7e		      .byte.b	#%01111110
    686  f383
    687  f383				   SnowmanLeft
    688  f383		       00		      .byte.b	#%00000000
    689  f384		       3f		      .byte.b	#%00111111
    690  f385		       3c		      .byte.b	#%00111100
    691  f386		       3c		      .byte.b	#%00111100
    692  f387		       3d		      .byte.b	#%00111101
    693  f388		       ff		      .byte.b	#%11111111
    694  f389		       bc		      .byte.b	#%10111100
    695  f38a		       3c		      .byte.b	#%00111100
    696  f38b		       2c		      .byte.b	#%00101100
    697  f38c		       3c		      .byte.b	#%00111100
    698  f38d
    699  f38d				   SnowmanRight
    700  f38d		       00		      .byte.b	#%00000000
    701  f38e		       fc		      .byte.b	#%11111100
    702  f38f		       3c		      .byte.b	#%00111100
    703  f390		       3c		      .byte.b	#%00111100
    704  f391		       bc		      .byte.b	#%10111100
    705  f392		       ff		      .byte.b	#%11111111
    706  f393		       3d		      .byte.b	#%00111101
    707  f394		       3c		      .byte.b	#%00111100
    708  f395		       34		      .byte.b	#%00110100
    709  f396		       3c		      .byte.b	#%00111100
    710  f397
    711  f397				   SnowmanDead
    712  f397		       00		      .byte.b	#%00000000
    713  f398		       ff		      .byte.b	#%11111111
    714  f399		       ff		      .byte.b	#%11111111
    715  f39a		       ff		      .byte.b	#%11111111
    716  f39b		       7f		      .byte.b	#%01111111
    717  f39c		       7e		      .byte.b	#%01111110
    718  f39d		       7e		      .byte.b	#%01111110
    719  f39e		       1c		      .byte.b	#%00011100
    720  f39f		       1c		      .byte.b	#%00011100
    721  f3a0		       3c		      .byte.b	#%00111100
    722  f3a1
    723  f3a1				   Icicle		; outline of icicle
    724  f3a1		       00		      .byte.b	#%00000000
    725  f3a2		       08		      .byte.b	#%00001000
    726  f3a3		       08		      .byte.b	#%00001000
    727  f3a4		       18		      .byte.b	#%00011000
    728  f3a5		       18		      .byte.b	#%00011000
    729  f3a6		       18		      .byte.b	#%00011000
    730  f3a7		       1c		      .byte.b	#%00011100
    731  f3a8		       1c		      .byte.b	#%00011100
    732  f3a9		       1c		      .byte.b	#%00011100
    733  f3aa		       3c		      .byte.b	#%00111100
    734  f3ab
    735  f3ab							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    736  f3ab							;; Fill ROM with 4KB
    737  f3ab							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    738  f3ab
    739  fffc					      org	$FFFC	; moves to $FFFC
    740  fffc		       00 f0		      word.w	Reset	; write 2 bytes with reset
    741  fffe		       00 f0		      word.w	Reset	; write 2 bytes with interuption vector
